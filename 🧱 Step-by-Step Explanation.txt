ðŸ§± Step-by-Step Explanation
ðŸ“‚ 1. Project Setup
âœ… Create your project folder
bash
Copy
Edit
mkdir my-backend
cd my-backend
âœ… Initialize Node.js project
bash
Copy
Edit
npm init -y
This creates a package.json file to manage your project.

ðŸ“¦ 2. Install Required Packages
bash
Copy
Edit
npm install express pg
express â†’ helps build server routes easily

pg â†’ helps Node.js talk to PostgreSQL

ðŸ§  3. Create app.js (Main File)
js
Copy
Edit
// app.js

const express = require('express');
const app = express();
const port = 3000;

// This line allows us to read JSON from requests
app.use(express.json());

app.get('/', (req, res) => {
  res.send('Hello, this is your backend server!');
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
ðŸŽ¯ What this does:
Creates a server that listens at http://localhost:3000

When you visit /, it sends back a message

ðŸ§  4. Add PostgreSQL Connection (db.js)
js
Copy
Edit
// db.js

const { Client } = require('pg');

const client = new Client({
  user: 'your_pg_username',
  host: 'localhost',
  database: 'your_database_name',
  password: 'your_pg_password',
  port: 5432,
});

client.connect()
  .then(() => console.log("Connected to PostgreSQL!"))
  .catch(err => console.error("Failed to connect:", err));

module.exports = client;
ðŸŽ¯ What this does:
Connects your Node.js app to PostgreSQL

You can now send SQL queries like SELECT, INSERT, etc.

ðŸ§  5. Create a Route to Get Data (routes/users.js)
js
Copy
Edit
// routes/users.js

const express = require('express');
const router = express.Router();
const db = require('../db');

router.get('/', async (req, res) => {
  try {
    const result = await db.query('SELECT * FROM users');
    res.json(result.rows);
  } catch (err) {
    res.status(500).send("Error fetching users");
  }
});

module.exports = router;
ðŸŽ¯ What this does:
Handles requests at /users

Fetches all users from your PostgreSQL users table

Sends that data back as a JSON array

ðŸ§  6. Connect Routes to App (app.js update)
Now update app.js like this:

js
Copy
Edit
const express = require('express');
const app = express();
const port = 3000;

// Middleware to read JSON
app.use(express.json());

// Import routes
const usersRoute = require('./routes/users');
app.use('/users', usersRoute);

app.get('/', (req, res) => {
  res.send('Backend is working!');
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
ðŸš€ 7. RUN Your Backend
bash
Copy
Edit
node app.js
You should see:

arduino
Copy
Edit
Server is running at http://localhost:3000
Connected to PostgreSQL!
ðŸ“¬ 8. Test With Postman
Open Postman

Do a GET request to http://localhost:3000/users

You should see user data from your database

ðŸ§ª EXTRA: Your PostgreSQL Table Example
Run this in your PostgreSQL:

sql
Copy
Edit
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name TEXT,
  email TEXT
);

INSERT INTO users (name, email) VALUES
('Nadeem', 'nadeem@example.com'),
('Ayesha', 'ayesha@example.com');
âœ… Summary (Real-World View)
Youâ€™ve now built a mini backend server that:

Uses Express to create routes (API endpoints)

Connects to PostgreSQL using pg

Can be tested using Postman

